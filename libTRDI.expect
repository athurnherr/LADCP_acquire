#!/usr/bin/expect -f
#======================================================================
#                    L I B T R D I . E X P E C T 
#                    doc: Sun Mar  7 19:15:29 2021
#                    dlm: Thu Mar 16 11:14:53 2023
#                    (c) 2021 A.M. Thurnherr
#                    uE-Info: 22 64 NIL 0 0 72 2 2 4 NIL ofnI
#======================================================================

# HISTORY:
#   Mar  7, 2021: - created
#	Mar  8, 2021: - improved
#	Mar  9, 2021: - improved
#	Mar 10, 2021: - made it work
#	Mar 19, 2021: - added TRDI_check_data
#	Mar 25, 2021: - BUG: timeout -i (nonsensical)
#	Mar 31, 2021: - BUG: check_data did not check for existence of file
#				  - added linking to ctd stn.cast in check_data
#	Apr  4, 2021: - BUG: parallel timeout produced error when first instrument
#						 auto-sleeps before 2nd finishes
#	Mar 16, 2023: - BUG: memory_empty was falsely set for ADCPs with
#						 2 cards installed and one of them empty

global TRDI_BREAK;
global DNLOAD;

set NEXT_SPEED	\002;	# ^B							# TRDIterm keyboard commands
set TRDI_BREAK 	\003;	# ^C
set HELP	\010;	# ^H
set DNLOAD	\030;	# ^X

proc gobble_prompts {} {								# gobble old prompts
	set continue_flushing 1;
	while {$continue_flushing > 0} {
		expect {
			timeout {set continue_flushing 0;}
			-timeout 0 ">";
		}
	}
}

proc BREAK_TRDI {} {									# send BREAK
	global TRDI_BREAK;

	gobble_prompts;
	send $TRDI_BREAK;									# Wakeup Instrument
	expect {
		timeout {error "Connection timeout: no deck power?"}
		-timeout 8 "RD Instruments (c)"
	}
	expect {											# gobble prompt as well
		timeout {error "Can't get wakeup prompt"}
		-timeout 3 ">"
	}
}

proc no_error_BREAK_TRDI {} {							# send BREAK without errcheck
	global TRDI_BREAK;

#	gobble_prompts;
	send $TRDI_BREAK;
	expect -timeout 8 "RD Instruments (c)"
	expect -timeout 3 ">"
}

proc next_speed {} {									# select next baudrate
	global NEXT_SPEED;
	
	send $NEXT_SPEED;
	expect {
		timeout {error "Cannot change speed"}
		-timeout 5 ": end"
	}
	sleep 1
}

proc wait4_TRDIterm_startup {} {						# wait for TRDIterm startup
	global cid;
	set cid 0;
	expect {
		timeout {error "TRDIterm failed to start up"}
		-timeout 10 "device" {
			error "No such device: cables plugged in???"
		}
		-timeout 10 "Instrument 0" {}
	}
#	sleep 1;
}

proc wakeup_TRDI {} {									# reset regardless of state
	no_error_BREAK_TRDI;
	send "\r";											# send NOP command
	expect {
		timeout {
			send_error ".";
			BREAK_TRDI;									# try again
		}
		-timeout 5 ">";									# instrument response received
	}
}

proc wait4_prompt {{tout 5}} {							# wait for prompt
	expect {
		timeout {error "Can't get prompt"}
		-timeout $tout "ERR" {
			error "Instrument returned error $expect_out(buffer)";
		}
		-timeout $tout ">"
	}
}

proc shutdown_TRDI {} {									# send instrument to sleep
	gobble_prompts;
	send "\r"; wait4_prompt;
	send "CZ\r";
	expect {
		timeout {error "Can't put Instrument to sleep"}
		-timeout 5 -re "Powering Down|POWERING DOWN"
	}
}

proc start_download_TRDI {} {							# start downloading
	global DNLOAD cast_dir cid;

	set cwd [pwd];
	cd $cast_dir;

	gobble_prompts;
	send "\r"; wait4_prompt;
	send $DNLOAD;
	expect {
		timeout { error "Cannot start TRDIterm download"; }
		-timeout 2 "Download Directory:" {}
	}
	send "$cast_dir\r";
	expect {
		timeout { error "Can't start download (memory empty?)"; }
		-timeout 10 "exists, skipped" { error "$cast_dir already contains TRDI data files!"; }
		-timeout 10 "Receiving:" {}
	}
	cd $cwd;
	set_color $cid;
	send_error "\n";
	log_user 1;
}

proc wait4_download_finish_TRDI {} {					# wait for download(s) to finish
	global BREAK;
	expect {
		timeout {error "Download did not finish ok"}
		-timeout -1 "Transfer complete" {}
		-timeout -1 "ABNORMALLY" {
			error "Download from TRDI failed";
		}
	}
	expect -timeout 5 ">";
	log_user 0;
	set_color;
}

proc wait4_download_finish_twoTRDIs {} {				# wait for download(s) to finish
	global BREAK PRIMARY_proc SECONDARY_proc;
	expect {
		timeout {error "Download timed out"}
		-timeout -1 -i $PRIMARY_proc "Transfer complete" {
			select_instrument 0;
			shutdown_TRDI;
			expect {
				timeout {error "Download from secondary timed out"}
				-timeout 600 -i $SECONDARY_proc "Transfer complete" {}
				-timeout 600 -i $SECONDARY_proc "ABNORMALLY" {
					set_color 1; error "Download from secondary terminated abnormally";
				}
			}
		}
		-timeout -1 -i $SECONDARY_proc "Transfer complete" {
			select_instrument 1;
			shutdown_TRDI;
			expect {
				timeout {error "Download from primary timed out"}
				-timeout 600 -i $PRIMARY_proc "Transfer complete" {}
				-timeout 600 -i $PRIMARY_proc "ABNORMALLY" {
					set_color 0; error "Download from primary terminated abnormally";
				}
			}
		}
		-timeout -1 -i $PRIMARY_proc "ABNORMALLY" {
			set_color 0; error "Download from primary terminated abnormally";
		}
		-timeout -1 -i $SECONDARY_proc "ABNORMALLY" {
			set_color 1; error "Download from secondary terminated abnormally";
		}
	}
	log_user 0;
	set_color;
}

proc list_dir_TRDI {} {									# list directory & set memory_empty flag
	global cid;
	global memory_empty;

	set memory_empty 0;
	gobble_prompts;
	send "\r"; wait4_prompt;
	send "RA\r";
	expect {
		timeout {error "Can't get number of deployments"};
		-timeout 3 "^0" { set memory_empty 1; }
		-timeout 3 ">"
	}

	gobble_prompts;
	send "\r"; wait4_prompt;
	send "RR\r";
	set_color $cid; log_user 1;
	send_user "\n";
	expect {
		timout { error "cannot get recorder directory" }
		-timeout 5 "No files found";
		-timeout 5 "bytes free";
	}
	wait4_prompt;
	log_user 0; send_user "\n";
	set_color;					
}

proc erase_memory_TRDI {} {								# erase memory
	gobble_prompts;

	send "\r"; wait4_prompt;
	send "RA\r";
	expect {
		timeout {error "Can't get number of deployments"};
		-timeout 3 -re {[1-9]} {
			wait4_prompt;
			send "RE ErAsE\r";
			expect {
				timeout {error "Can't erase recorder"}
				-timeout 5 "Recorder erased."			
			}
			wait4_prompt;
		}
		-timeout 3 ">"									# nothing to erase
	}
}

			
proc set_clock_TRDI {} {								# set instrument clock
	gobble_prompts;
	send "\r"; wait4_prompt;
	set time [exec date +%Y/%m/%d,%H:%M:%S];
	send "TT$time\r";
	wait4_prompt;
}

proc upload_config_TRDI {cfn lbl} {						# upload command file
	global cid;
	global profnum;
	
	gobble_prompts;										# logging stops in this routine
	send "\r"; wait4_prompt;
	set cf [open $cfn "r"];
	set_color $cid;
	while {[gets $cf line] >= 0} {
		regsub {[ 	]*;.*} $line {} line;
		regsub {\$\{ID_STR\}} $line [format "%03d%s" $profnum $lbl] line;	# replace ${ID_STR}
		if {![regexp {^[ 	]*$} $line]} {
			if {$line == "CS" || $line == "cs"} {
				send_error "*";
				send "$line\r";
				expect {
					timeout {};
					-timeout 3 expect ">" {
						error "Got prompt after CS command";
					}
				}
				set_color;
				close $cf;
				return;
			}
			send "$line\r";
			send_error ".";
			expect {
				timeout {error "Can't get prompt after sending $line"};
				-timeout 5 "ERR" {
					error "Sending command $line returned $expect_out(buffer)";
				}
				-timeout 5 ">"
			}
		}
	}
	set_color;
	close $cf;
}

proc load_factory_defaults_TRDI {} {						# set default params
	gobble_prompts;
	send "\r"; wait4_prompt;
	send "CR1\r";
	expect {
		timeout { error "Can't get prompt" };
		-timeout 10 "ERR" {
			error "command CR1 returned $expect_out(buffer)";
		}
		-timeout 10 "FACTORY defaults]"
	}
	wakeup_TRDI;											# unclear why this is required but it is
}

proc set_deployment_name_TRDI {{dn UNSET}} {				# set deployment name
	gobble_prompts;
	send "\r"; wait4_prompt;
	send "RN$dn\r";
	expect -timeout 1 "ERR";								# BB150
	wait4_prompt;
}

proc check_data_TRDI {cast_dir profnum lbl} {				# calculate zmax/zend, create ctd station link
	global DATA_DIRECTORY;
	set data_file [format "%03d%s000.000" $profnum $lbl];
	if {![file isfile $cast_dir/$data_file]} {
		send_error "$cast_dir/$data_file: no such file or directory\n";
		set_color;
		exit 1;
	}
	exec sh -c "mkProfile -Q $cast_dir/$data_file 2> $cast_dir/`basename $data_file .000`.profinfo";
	exec sh -c "cat $cast_dir/`basename $data_file .000`.profinfo > /dev/tty";

	if {![file isfile $cast_dir/CTD.station]} {
		send_error "$cast_dir/CTD.station: no such file or directory\n";
		set_color;
		exit 1;
	}
	scan [exec cat "$cast_dir/CTD.station"] "%d.%d" station cast;
	set ctd_num_file [format "%03d%02d_%s.PD0" $station $cast $lbl];
	set link_name [format "%03d/%s" $profnum $data_file];
	exec sh -c "ln -fs $link_name $DATA_DIRECTORY/$ctd_num_file";
}
	
	

